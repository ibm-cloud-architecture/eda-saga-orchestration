app.version=0.0.1
mp.openapi.extensions.smallrye.info.title=Order management microservice API
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Just an example of event-driven Order management service
mp.openapi.extensions.smallrye.info.termsOfService=Your terms here...
mp.openapi.extensions.smallrye.info.contact.name=IBM Automation - EDA team
mp.openapi.extensions.smallrye.info.contact.url=http://https://ibm-cloud-architecture.github.io/refarch-eda/
mp.openapi.extensions.smallrye.info.license.name=Apache 2.0
mp.openapi.extensions.smallrye.info.license.url=https://www.apache.org/licenses/LICENSE-2.0.html

quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=INFO
%dev.quarkus.log.category."ibm.eda".level=DEBUG
quarkus.swagger-ui.always-include=true
quarkus.http.cors=true
quarkus.http.port=8080

#quarkus.datasource.db-kind=postgresql
#quarkus.datasource.jdbc=true
#quarkus.datasource.reactive=false
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5434/orderdb
##quarkus.datasource.reactive.url=postgresql:///eda_orders
#quarkus.hibernate-orm.database.generation=update
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/orderdb
quarkus.datasource.username=orderuser
quarkus.datasource.password=orderpw
quarkus.hibernate-orm.log.sql=true
#quarkus.hibernate-orm.database.generation=update
quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.database.default-schema=shippingorder
quarkus.log.level=INFO
quarkus.log.min-level=INFO
quarkus.log.console.enable=true

#kafka.topic.name=orders
#%dev.kafka.bootstrap.servers=localhost:9092
#mp.messaging.outgoing.orders.connector=smallrye-kafka
#mp.messaging.outgoing.orders.topic=orders
#mp.messaging.outgoing.orders.acks=-1
#mp.messaging.outgoing.orders.enable.idempotence=true
#mp.messaging.outgoing.orders.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.orders.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#mp.messaging.outgoing.orders.max-in.flight.requests.per.connection=1
#mp.messaging.outgoing.orders.delivery.time.out=60000
#mp.messaging.outgoing.orders.client.id=OrderManager

mp.messaging.incoming.container-response.connector=smallrye-kafka
mp.messaging.incoming.container-response.topic=container-reservation.response
mp.messaging.incoming.container-response.bootstrap.servers=localhost:9092
mp.messaging.incoming.container-response.group.id=order-service
mp.messaging.incoming.container-response.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.container-response.value.deserializer=ibm.eda.kc.ordersaga.infra.serial.ContainerDeserializer
mp.messaging.incoming.container-response.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

mp.messaging.incoming.voyage-response.connector=smallrye-kafka
mp.messaging.incoming.voyage-response.topic=voyage-reservation.response
mp.messaging.incoming.voyage-response.bootstrap.servers=localhost:9092
mp.messaging.incoming.voyage-response.group.id=order-service
mp.messaging.incoming.voyage-response.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.voyage-response.value.deserializer=ibm.eda.kc.ordersaga.infra.serial.VoyageDeserializer
mp.messaging.incoming.voyage-response.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor

quarkus.jaeger.service-name=order-service