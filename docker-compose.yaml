version: '2.1'
services:
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:1
    ports:
      - 6831:6831/udp
      - 16686:16686
    networks:
      - my-network
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    networks:
      - my-network
  kafka:
    container_name: kafka
    hostname: kafka
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
    # Set to host IP address when working on the services locally
      - ADVERTISED_HOST_NAME=10.0.0.30
    networks:
      - my-network
  connect:
    image: saga-orchestration/debezium-strimzi/strimzi-connect
    container_name: connect
    build:
      context: debezium-strimzi
    ports:
      - 8083:8083
    links:
      - kafka
      - order-db
    environment:
      - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
      - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - |
        KAFKA_CONNECT_CONFIGURATION=
        errors.tolerance=all
        security.protocol=PLAINTEXT
        bootstrap.servers=kafka:9092
        errors.deadletterqueue.topic.name=eda.dlq
        errors.deadletterqueue.topic.replication.factor=1
        key.converter=org.apache.kafka.connect.json.JsonConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        key.converter.schemas.enable=false
        value.converter.schemas.enable=false
        group.id=connect
        offset.storage.topic=connect-offsets
        offset.storage.replication.factor=1
        config.storage.topic=connect-configs
        config.storage.replication.factor=1
        status.storage.topic=connect-status
        status.storage.replication.factor=1
        consumer.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor
        producer.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor
      - JAEGER_SERVICE_NAME=kafka-connect
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - STRIMZI_TRACING=jaeger
    command: /opt/kafka/kafka_connect_run.sh
    depends_on:
      - kafka
    networks:
      - my-network
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
    depends_on:
      - kafka
    networks:   
      - my-network
  order-db:
    #image: quay.io/silak/eda-postgres:${DEBEZIUM_VERSION}
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
      - 5432:5432
    healthcheck:
      test: "pg_isready -U orderuser -d orderdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=orderuser
      - POSTGRES_PASSWORD=orderpw
      - POSTGRES_DB=orderdb
    volumes:
      - ./init-order.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-network
  voyage-db:
    #image: quay.io/silak/eda-postgres:${DEBEZIUM_VERSION}
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
      - 5434:5432
    healthcheck:
      test: "pg_isready -U voyageuser -d voyagedb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=voyageuser
      - POSTGRES_PASSWORD=voyagepw
      - POSTGRES_DB=voyagedb
    volumes:
      - ./init-voyage.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-network
  container-db:
    #image: quay.io/silak/eda-postgres:${DEBEZIUM_VERSION}
    image: quay.io/debezium/example-postgres:${DEBEZIUM_VERSION}
    ports:
      - 5433:5432
    healthcheck:
      test: "pg_isready -U containeruser -d containerdb"
      interval: 2s
      timeout: 20s
      retries: 10
    environment:
      - POSTGRES_USER=containeruser
      - POSTGRES_PASSWORD=containerpw
      - POSTGRES_DB=containerdb
    volumes:
      - ./init-container.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-network
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    volumes:
      - ./servers.json:/pgadmin4/servers.json
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - my-network
  order-service:
    image: eda-demo/saga-order-service:${DEBEZIUM_VERSION}
    build:
      context: order-service
      dockerfile: src/main/docker/Dockerfile.jvm
    ports:
      - 8080:8080
    links:
      - kafka
      - order-db
      - jaeger
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://order-db:5432/orderdb
      - MP_MESSAGING_INCOMING_CONTAINERRESPONSE_BOOTSTRAP_SERVERS=kafka:9092
      - MP_MESSAGING_INCOMING_VOYAGERESPONSE_BOOTSTRAP_SERVERS=kafka:9092
      - JAEGER_SERVICE_NAME=order-service
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      order-db:
        condition: service_healthy
    networks:
      - my-network
  voyage-service:
    image: eda-demo/saga-voyage-service:${DEBEZIUM_VERSION}
    build:
      context: voyage-service
      dockerfile: src/main/docker/Dockerfile.jvm
    links:
      - kafka
      - voyage-db
      - jaeger
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://voyage-db:5432/voyagedb
      - MP_MESSAGING_INCOMING_VOYAGE_BOOTSTRAP_SERVERS=kafka:9092
      - JAEGER_SERVICE_NAME=voyage-service
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      voyage-db:
        condition: service_healthy
    networks:
      - my-network
  container-service:
    image: eda-demo/saga-container-service:${DEBEZIUM_VERSION}
    build:
      context: container-service
      dockerfile: src/main/docker/Dockerfile.jvm
    links:
      - kafka
      - container-db
      - jaeger
    environment:
      - QUARKUS_DATASOURCE_JDBC_URL=jdbc:postgresql://container-db:5432/containerdb
      - MP_MESSAGING_INCOMING_CONTAINER_BOOTSTRAP_SERVERS=kafka:9092
      - JAEGER_SERVICE_NAME=container-service
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - JAEGER_AGENT_HOST=jaeger
    depends_on:
      container-db:
        condition: service_healthy
    networks:
      - my-network
networks:
  my-network:
    name: saga-network
