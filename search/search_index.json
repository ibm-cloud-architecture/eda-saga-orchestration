{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Saga Orchestration demonstration \u00b6 Context \u00b6 Introduced in 1987 by Hector Garcaa-Molrna Kenneth Salem paper the Saga pattern helps to support a long running transaction that can be broken up to a collection of sub transactions that can be interleaved any way with other transactions. With microservice each transaction updates data within a single service, each subsequent steps may be triggered by previous completion. Implementation explanation \u00b6 We have implemented the SAGA pattern in the Reefer Container Shipment Reference Application for the scenario where a customer creates an order to carry fresh goods from an origin port to a destination port. The Orchestration variant of the SAGA pattern, leveraging Kafka, involves strong decoupling between services, and each participants listen to facts and act on them independently. So each service will have at least one topic representing states on their own entity. In the figure below the saga is managed in the context of the order microservice in one of the business function like createOrder . The figure above illustrates that each services uses its own topic in Kafka, so to manage the saga the Order service needs to listen to all participants outcome. The happy path is illustrated diagram: Upon the request to create an order, the OrderServiceSaga creates an order and sends an OrderCreatedEvent to the event broker. The Saga receives an acknowledgement that the event has been succssfully published. The next order of things is to reserve a voyage. The Saga issues the command ReserveVoyageCmd. The VoyagerMS microservice consumes this event which causes it to reserve a voyage. With a voyage successfully reserved, VoyagerMS sends a VoyageAllocatedEvent to signal successful completion. The saga consumes this event which prompts it to transition to the next activity With a voyage booked we now need a reefer. The Saga reserves a reefer by issuing a ReserveReeferCmd command. The ContainerMS is in charge of reefer reservations. It verifies availability of reefers, grabs a reefer and responds with a ReeferReservedEvent. At this point all microservices have successfully executed and the saga ends the transaction with an OrderAssignedEvent. Code repositories \u00b6 The new implementation of the services are done with Quarkus and Microprofile Messaging. Order Microservice Reefer Microsercice Voyage Microservice Each code structure is based on the domain-driven-design practice with clear separation between layers (app, domain, infrastructure) and keep the domain layer using the ubiquituous language of each domain: order, reefer, and voyage. \u2502 \u2502 \u2502 \u2514\u2500\u2500 ibm \u2502 \u2502 \u2502 \u2514\u2500\u2500 eda \u2502 \u2502 \u2502 \u2514\u2500\u2500 kc \u2502 \u2502 \u2502 \u2514\u2500\u2500 orderms \u2502 \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderCommandApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 domain \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Address.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ShippingOrder.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 infra \u2502 \u2502 \u2502 \u251c\u2500\u2500 api \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ShippingOrderResource.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 events \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 EventBase.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 order \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderCreatedEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderEventProducer.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderUpdatedEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderVariablePayload.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 reefer \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferAgent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferAllocated.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferEventDeserializer.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ReeferVariablePayload.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 voyage \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageAgent.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageAllocated.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageEvent.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageEventDeserializer.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 VoyageVariablePayload.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 repo \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderRepositoryMem.java Events are defined in the infrastructure level, as well as the JAX-RS APIs. Compensation \u00b6 The SAGA pattern comes with the tradeoff that a compensation process must also be implemented in the case that one, or multiple, of the sub transactions fails or does not achieve to complete so that the system rolls back to the initial state before the transaction began. In our specific case, a new order creation transaction can fail either because we can not find a refrigerator container to be allocated to the order or we can not find a voyage to assigned to the order. No container \u00b6 When a new order creation is requested by a customer but there is not a container to be allocated to such order, either because the container(s) do not have enough capacity or there is no container available in the origin port for such order, the compensation process for the order creation transaction is quite simple. The order microservice will not get an answer from the reefer manager, anf after a certain time it will trigger the compensation flow by sending a OrderUpdate with status onHold. The voyage service which may has responded positively before that, may roll back the order to voyage relationship. No voyage \u00b6 This case is the sysmetric of the other one. The actions flow remains as expected for the SAGA transaction until the Voyages microservice is not answering after a time period or answering negatively. As a result, the Order Command microservice will transition the order to OnHold and emit an OrderUpdateEvent to inform the saga participants. In this case, the Reefer manager is one of those interested parties as it will need to kick off the compensation task, which in this case is nothing more than de-allocate the container to the order to make it available for any other coming order. Run locally \u00b6 In this repository, we have define a docker compose file that let you run the demonstration on your local computer. You need podman or docker and docker compose. docker-compose up -d Happy path demonstration \u00b6 Execute the create order ./e2e/sendGoodOrder.sh { \"orderID\" : \"GoodOrder02\" , \"productID\" : \"P01\" , \"customerID\" : \"Customer01\" , \"quantity\" : 70 , \"pickupAddress\" :{ \"street\" : \"1st main street\" , \"city\" : \"San Francisco\" , \"country\" : \"USA\" , \"state\" : \"CA\" , \"zipcode\" : \"95051\" }, \"pickupDate\" : null , \"destinationAddress\" :{ \"street\" : \"1st horizon road\" , \"city\" : \"Shanghai\" , \"country\" : \"CH\" , \"state\" : \"S1\" , \"zipcode\" : \"95051\" }, \"expectedDeliveryDate\" : null , \"creationDate\" : \"2022-05-16\" , \"updateDate\" : \"2022-05-16\" , \"status\" : \"pending\" } Verify in Kafdrop the orders topic contains the expected CreateOrder event chrome https://localhost:9000 Verify in Kafdrop the reefers topic Verify the voyages topic The ShippingOrder should now be in assigned state as the order manager receives the two positive answers from the saga participant. Trigger the compensation tasks \u00b6 The order has a pickup city set to Boston, and there is no reefer available at that location at that time, so the Reefer service is not responding to the order. The order microservice has two timers for each topics it subscribes to. If those timer sets, it looks at existing pending orders and trigget an OrderUpdateEvent with status onHold. Send an order from Boston ./e2e/sendNonPossibleOrder.sh Verify order created event reaches voyage and reefer microservices Voyage generates a event for voyages allocated. Deploy with Event Streams on OpenShift \u00b6 TBD","title":"Home"},{"location":"#saga-orchestration-demonstration","text":"","title":"Saga Orchestration demonstration"},{"location":"#context","text":"Introduced in 1987 by Hector Garcaa-Molrna Kenneth Salem paper the Saga pattern helps to support a long running transaction that can be broken up to a collection of sub transactions that can be interleaved any way with other transactions. With microservice each transaction updates data within a single service, each subsequent steps may be triggered by previous completion.","title":"Context"},{"location":"#implementation-explanation","text":"We have implemented the SAGA pattern in the Reefer Container Shipment Reference Application for the scenario where a customer creates an order to carry fresh goods from an origin port to a destination port. The Orchestration variant of the SAGA pattern, leveraging Kafka, involves strong decoupling between services, and each participants listen to facts and act on them independently. So each service will have at least one topic representing states on their own entity. In the figure below the saga is managed in the context of the order microservice in one of the business function like createOrder . The figure above illustrates that each services uses its own topic in Kafka, so to manage the saga the Order service needs to listen to all participants outcome. The happy path is illustrated diagram: Upon the request to create an order, the OrderServiceSaga creates an order and sends an OrderCreatedEvent to the event broker. The Saga receives an acknowledgement that the event has been succssfully published. The next order of things is to reserve a voyage. The Saga issues the command ReserveVoyageCmd. The VoyagerMS microservice consumes this event which causes it to reserve a voyage. With a voyage successfully reserved, VoyagerMS sends a VoyageAllocatedEvent to signal successful completion. The saga consumes this event which prompts it to transition to the next activity With a voyage booked we now need a reefer. The Saga reserves a reefer by issuing a ReserveReeferCmd command. The ContainerMS is in charge of reefer reservations. It verifies availability of reefers, grabs a reefer and responds with a ReeferReservedEvent. At this point all microservices have successfully executed and the saga ends the transaction with an OrderAssignedEvent.","title":"Implementation explanation"},{"location":"#code-repositories","text":"The new implementation of the services are done with Quarkus and Microprofile Messaging. Order Microservice Reefer Microsercice Voyage Microservice Each code structure is based on the domain-driven-design practice with clear separation between layers (app, domain, infrastructure) and keep the domain layer using the ubiquituous language of each domain: order, reefer, and voyage. \u2502 \u2502 \u2502 \u2514\u2500\u2500 ibm \u2502 \u2502 \u2502 \u2514\u2500\u2500 eda \u2502 \u2502 \u2502 \u2514\u2500\u2500 kc \u2502 \u2502 \u2502 \u2514\u2500\u2500 orderms \u2502 \u2502 \u2502 \u251c\u2500\u2500 app \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderCommandApplication.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 domain \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 Address.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderService.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ShippingOrder.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 infra \u2502 \u2502 \u2502 \u251c\u2500\u2500 api \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ShippingOrderResource.java \u2502 \u2502 \u2502 \u251c\u2500\u2500 events \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 EventBase.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 order \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderCreatedEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderEventProducer.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderUpdatedEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderVariablePayload.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 reefer \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferAgent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferAllocated.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferEvent.java \u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ReeferEventDeserializer.java \u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ReeferVariablePayload.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 voyage \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageAgent.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageAllocated.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageEvent.java \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 VoyageEventDeserializer.java \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 VoyageVariablePayload.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 repo \u2502 \u2502 \u2502 \u251c\u2500\u2500 OrderRepository.java \u2502 \u2502 \u2502 \u2514\u2500\u2500 OrderRepositoryMem.java Events are defined in the infrastructure level, as well as the JAX-RS APIs.","title":"Code repositories"},{"location":"#compensation","text":"The SAGA pattern comes with the tradeoff that a compensation process must also be implemented in the case that one, or multiple, of the sub transactions fails or does not achieve to complete so that the system rolls back to the initial state before the transaction began. In our specific case, a new order creation transaction can fail either because we can not find a refrigerator container to be allocated to the order or we can not find a voyage to assigned to the order.","title":"Compensation"},{"location":"#no-container","text":"When a new order creation is requested by a customer but there is not a container to be allocated to such order, either because the container(s) do not have enough capacity or there is no container available in the origin port for such order, the compensation process for the order creation transaction is quite simple. The order microservice will not get an answer from the reefer manager, anf after a certain time it will trigger the compensation flow by sending a OrderUpdate with status onHold. The voyage service which may has responded positively before that, may roll back the order to voyage relationship.","title":"No container"},{"location":"#no-voyage","text":"This case is the sysmetric of the other one. The actions flow remains as expected for the SAGA transaction until the Voyages microservice is not answering after a time period or answering negatively. As a result, the Order Command microservice will transition the order to OnHold and emit an OrderUpdateEvent to inform the saga participants. In this case, the Reefer manager is one of those interested parties as it will need to kick off the compensation task, which in this case is nothing more than de-allocate the container to the order to make it available for any other coming order.","title":"No voyage"},{"location":"#run-locally","text":"In this repository, we have define a docker compose file that let you run the demonstration on your local computer. You need podman or docker and docker compose. docker-compose up -d","title":"Run locally"},{"location":"#happy-path-demonstration","text":"Execute the create order ./e2e/sendGoodOrder.sh { \"orderID\" : \"GoodOrder02\" , \"productID\" : \"P01\" , \"customerID\" : \"Customer01\" , \"quantity\" : 70 , \"pickupAddress\" :{ \"street\" : \"1st main street\" , \"city\" : \"San Francisco\" , \"country\" : \"USA\" , \"state\" : \"CA\" , \"zipcode\" : \"95051\" }, \"pickupDate\" : null , \"destinationAddress\" :{ \"street\" : \"1st horizon road\" , \"city\" : \"Shanghai\" , \"country\" : \"CH\" , \"state\" : \"S1\" , \"zipcode\" : \"95051\" }, \"expectedDeliveryDate\" : null , \"creationDate\" : \"2022-05-16\" , \"updateDate\" : \"2022-05-16\" , \"status\" : \"pending\" } Verify in Kafdrop the orders topic contains the expected CreateOrder event chrome https://localhost:9000 Verify in Kafdrop the reefers topic Verify the voyages topic The ShippingOrder should now be in assigned state as the order manager receives the two positive answers from the saga participant.","title":"Happy path demonstration"},{"location":"#trigger-the-compensation-tasks","text":"The order has a pickup city set to Boston, and there is no reefer available at that location at that time, so the Reefer service is not responding to the order. The order microservice has two timers for each topics it subscribes to. If those timer sets, it looks at existing pending orders and trigget an OrderUpdateEvent with status onHold. Send an order from Boston ./e2e/sendNonPossibleOrder.sh Verify order created event reaches voyage and reefer microservices Voyage generates a event for voyages allocated.","title":"Trigger the compensation tasks"},{"location":"#deploy-with-event-streams-on-openshift","text":"TBD","title":"Deploy with Event Streams on OpenShift"}]}